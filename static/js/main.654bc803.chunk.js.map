{"version":3,"sources":["features/post/postSlice.js","features/post/Comment.js","features/post/CommentSection.js","features/post/AddCommentForm.js","features/post/Post.js","features/post/PostsContainer.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["postSlice","createSlice","name","initialState","posts","id","creator","username","location","profilePicture","likes","comments","postedBy","message","liked","replies","repliedTo","reducers","addComment","state","action","payload","postId","push","newComment","toggleCommentLike","comment","find","commentId","fetchPosts","JSON","parse","localStorage","getItem","actions","Comment","dispatch","useDispatch","Box","marginLeft","marginRight","width","display","alignItems","flexGrow","Typography","style","fontWeight","IconButton","aria-label","onClick","CommentSection","useSelector","post","border","borderColor","borderRadius","map","AddCommentForm","useState","setComment","handleSubmitComment","event","preventDefault","length","padding","onSubmit","InputBase","placeholder","fullWidth","value","onChange","target","Button","color","textTransform","Post","Divider","PostsContainer","useEffect","setItem","stringify","App","className","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","store","configureStore","reducer","counter","counterReducer","postReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.654bc803.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  posts: [\n    {\n      id: 0,\n      creator: {\n        username: \"kingkong123\",\n        location: \"Los Angeles, California\",\n        profilePicture: \"/static/images/avatar/1.jpg\",\n      },\n      likes: 0,\n      comments: [\n        {\n          id: 0,\n          postedBy: \"John\",\n          profilePicture: \"/static/images/avatar/2.jpg\",\n          message: \"Hey everyone! First post!\",\n          liked: false,\n          replies: [],\n          repliedTo: null,\n        },\n        {\n          id: 1,\n          postedBy: \"Sarah\",\n          profilePicture: \"/static/images/avatar/3.jpg\",\n          message: \"Cool!!!\",\n          liked: false,\n          replies: [],\n          repliedTo: null,\n        },\n        {\n          id: 2,\n          postedBy: \"Jimmy\",\n          profilePicture: \"/static/images/avatar/4.jpg\",\n          message: \"Nice one.\",\n          liked: false,\n          replies: [],\n          repliedTo: null,\n        },\n      ],\n    },\n  ],\n};\n\nexport const postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {\n    // add a new comment to the specified post's comments array\n    addComment: (state, action) => {\n      state.posts[action.payload.postId].comments.push(\n        action.payload.newComment\n      );\n    },\n    // toggle the specified comment's like property\n    toggleCommentLike: (state, action) => {\n      let comment = state.posts[action.payload.postId].comments.find(\n        ({ id }) => id === action.payload.commentId\n      );\n      comment.liked = !comment.liked;\n    },\n    // fetch the user's local storage posts if available rather than use the client's starting mock data\n    fetchPosts: (state) => {\n      const { posts } = JSON.parse(localStorage.getItem(\"posts\")); // destructuring the item key \"posts\" from local storage\n      state.posts = posts; // set the redux store 'posts' state to be from local storage\n    },\n  },\n});\n\nexport const { addComment, toggleCommentLike, fetchPosts } = postSlice.actions;\n\nexport default postSlice.reducer;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { toggleCommentLike } from \"./postSlice\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\n\n/* A Comment component */\nconst Comment = ({ comment }) => {\n  const dispatch = useDispatch();\n  return (\n    <Box\n      marginLeft=\"auto\"\n      marginRight=\"auto\"\n      width=\"95%\"\n      display=\"flex\"\n      alignItems=\"center\"\n    >\n      <Box display=\"flex\" flexGrow={1}>\n        <Typography style={{ fontWeight: 600 }}>\n          {comment.postedBy} &nbsp;\n        </Typography>\n        <Typography>{comment.message}</Typography>\n      </Box>\n      <IconButton\n        aria-label={comment.liked ? \"unlike comment\" : \"like comment\"}\n        onClick={() =>\n          dispatch(toggleCommentLike({ commentId: comment.id, postId: 0 }))\n        }\n      >\n        {comment.liked ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n      </IconButton>\n    </Box>\n  );\n};\n\nexport default Comment;\n","import React from \"react\";\nimport Comment from \"./Comment\";\nimport { useSelector } from \"react-redux\";\nimport Box from \"@material-ui/core/Box\";\n\nconst CommentSection = ({ postId }) => {\n  const comments = useSelector((state) => state.post.posts[postId].comments);\n\n  return (\n    <Box width=\"80%\" border={1} borderColor=\"grey.300\" borderRadius={10}>\n      {comments.map((comment) => (\n        <Comment key={comment.id} comment={comment} />\n      ))}\n    </Box>\n  );\n};\n\nexport default CommentSection;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addComment } from \"./postSlice\";\nimport Box from \"@material-ui/core/Box\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Button from \"@material-ui/core/Button\";\n\n/* Form to add a new comment to an instagram post */\nconst AddCommentForm = () => {\n  // fetch the comments array of the current post; used for creation of new comment id\n  const comments = useSelector((state) => state.post.posts[0].comments);\n  const dispatch = useDispatch();\n  const [comment, setComment] = useState(\"\");\n\n  // controlled input\n  const handleCommentChange = (event) => {\n    setComment(event.target.value);\n  };\n\n  // dispatch the new comment to add and the current post id, reset input\n  const handleSubmitComment = (event) => {\n    event.preventDefault();\n    const newComment = {\n      id: comments.length,\n      postedBy: JSON.parse(localStorage.getItem(\"user\")).username,\n      message: comment,\n      liked: false,\n      replies: [],\n      repliedTo: null,\n    };\n    dispatch(addComment({ newComment, postId: 0 }));\n    setComment(\"\");\n  };\n\n  return (\n    <Box padding={1} marginLeft=\"auto\" marginRight=\"auto\" width=\"80%\">\n      <form style={{ display: \"flex\" }} onSubmit={handleSubmitComment}>\n        <InputBase\n          placeholder=\"Add a comment...\"\n          fullWidth={true}\n          value={comment}\n          onChange={handleCommentChange}\n        />\n        <Button\n          color=\"primary\"\n          style={{\n            fontWeight: 600,\n            textTransform: \"none\",\n            marginLeft: \"auto\",\n          }}\n          onClick={handleSubmitComment}\n        >\n          Post\n        </Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default AddCommentForm;\n","import React from \"react\";\nimport CommentSection from \"./CommentSection\";\nimport Divider from \"@material-ui/core/Divider\";\nimport AddCommentForm from \"./AddCommentForm\";\n\n/* A Post component */\nconst Post = () => {\n  return (\n    <>\n      <CommentSection postId={0} />\n      <Divider />\n      <AddCommentForm />\n      {/* Portrait Version */}\n      {/* From top to bottom */}\n      {/* Card Header */}\n      {/* Card Image */}\n      {/* Card Action Bar Items; like, comment, share, bookmark  */}\n      {/* Post likes */}\n      {/* Comments Section */}\n      {/* Add Comment Form */}\n\n      {/* Landscape Version */}\n      {/* Left Side */}\n      {/* Card Image */}\n      {/* Right Side*/}\n      {/* Card Header */}\n      {/* Comments Section */}\n      {/* Card Action Bar Items; like, comment, share, bookmark  */}\n      {/* Post likes */}\n      {/* Post posted time elapsed */}\n      {/* Add Comment Form */}\n    </>\n  );\n};\n\nexport default Post;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPosts } from \"./postSlice\";\nimport Post from \"./Post\";\n\n/* Container for all the posts to be populated */\nconst PostsContainer = () => {\n  const posts = useSelector((state) => state.post); // the 'posts' array from the redux store\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const localData = JSON.parse(localStorage.getItem(\"posts\")); // retrieve the posts data from user's local storage\n\n    // if the posts data does exist, then we set the posts value from local storage to the store to reflect most updated data\n    if (localData) {\n      dispatch(fetchPosts());\n    }\n  }, [dispatch]);\n\n  // set and update the posts data to local storage whenever the state changes\n  useEffect(() => {\n    localStorage.setItem(\"posts\", JSON.stringify(posts));\n  }, [posts]);\n\n  return (\n    <>\n      <h1>Hi</h1>\n      {/* Map all posts */}\n      <Post />\n    </>\n  );\n};\n\nexport default PostsContainer;\n","import React, { useEffect } from \"react\";\nimport PostsContainer from \"./features/post/PostsContainer\";\nimport \"./App.css\";\n\nfunction App() {\n  useEffect(() => {\n    // retrieve the current user(name) from local storage\n    const currentUser = localStorage.getItem(\"user\");\n\n    // if the current user does not exist, then we populate the local storage with a user\n    if (!currentUser) {\n      localStorage.setItem(\"user\", JSON.stringify({username: \"waterguy242\", profilePicture: \"/static/images/avatar/3.jpg\"}));\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <PostsContainer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport postReducer from '../features/post/postSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    post: postReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}