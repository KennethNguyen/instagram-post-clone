{"version":3,"sources":["images/avatar sync /^/.//.*/.jpg$","images/avatar/1.jpg","images/avatar/2.jpg","images/avatar/3.jpg","images/avatar/4.jpg","images/avatar/5.jpg","images/media sync /^/.//.*/.jpg$","images/media/flower.jpg","features/post/postSlice.js","features/post/PostHeader.js","features/post/PostMedia.js","features/post/PostActions.js","features/post/Comment.js","features/post/CommentSection.js","features/post/AddCommentForm.js","features/post/PostPortrait.js","features/post/PostLandscape.js","features/post/Post.js","features/post/PostsContainer.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","postSlice","createSlice","name","initialState","posts","creator","username","location","profilePicture","media","likes","createdAt","comments","postedBy","message","liked","replies","repliedTo","reducers","addComment","state","action","payload","postId","push","newComment","toggleCommentLike","comment","find","commentId","fetchPosts","JSON","parse","localStorage","getItem","actions","PostHeader","postCreator","CardHeader","avatar","Avatar","alt","src","require","default","IconButton","aria-label","title","subheader","PostMedia","postMedia","CardMedia","style","height","width","component","image","PostActions","CardActions","disableSpacing","fontSize","marginLeft","Comment","dispatch","useDispatch","Box","marginRight","display","alignItems","flexGrow","Typography","fontWeight","minWidth","overflowWrap","onClick","CommentSection","CardContent","AddCommentForm","useSelector","post","useState","setComment","handleSubmitComment","event","preventDefault","length","padding","onSubmit","InputBase","placeholder","fullWidth","value","onChange","target","Button","color","textTransform","PostPortrait","Card","Divider","paddingBottom","moment","fromNow","PostLandscape","Post","version","PostsContainer","useEffect","setItem","stringify","App","className","fetchCount","amount","Promise","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","store","configureStore","reducer","counter","counterReducer","postReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46e467a7.chunk.js","sourcesContent":["var map = {\n\t\"./1.jpg\": 76,\n\t\"./2.jpg\": 77,\n\t\"./3.jpg\": 78,\n\t\"./4.jpg\": 79,\n\t\"./5.jpg\": 80\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 75;","export default __webpack_public_path__ + \"static/media/1.c73334b1.jpg\";","export default __webpack_public_path__ + \"static/media/2.b72eb251.jpg\";","export default __webpack_public_path__ + \"static/media/3.a692fe88.jpg\";","export default __webpack_public_path__ + \"static/media/4.b40ae7fe.jpg\";","export default __webpack_public_path__ + \"static/media/5.825d1c43.jpg\";","var map = {\n\t\"./flower.jpg\": 83\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 82;","export default __webpack_public_path__ + \"static/media/flower.139557a3.jpg\";","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  posts: [\n    {\n      id: 0,\n      creator: {\n        username: \"kingkong123\",\n        location: \"Los Angeles, California\",\n        profilePicture: \"1\",\n      },\n      media: \"flower\",\n      likes: 0,\n      createdAt: \"2021-04-23T14:48:00.000Z\",\n      comments: [\n        {\n          id: 0,\n          postedBy: \"John\",\n          profilePicture: \"2\",\n          message: \"Hey everyone! First post!\",\n          liked: false,\n          replies: [],\n          repliedTo: null,\n        },\n        {\n          id: 1,\n          postedBy: \"Sarah\",\n          profilePicture: \"3\",\n          message: \"Cool!!!\",\n          liked: false,\n          replies: [],\n          repliedTo: null,\n        },\n        {\n          id: 2,\n          postedBy: \"Krystal\",\n          profilePicture: \"4\",\n          message: \"Nice one.\",\n          liked: false,\n          replies: [],\n          repliedTo: null,\n        },\n      ],\n    },\n  ],\n};\n\nexport const postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {\n    // add a new comment to the specified post's comments array\n    addComment: (state, action) => {\n      state.posts[action.payload.postId].comments.push(\n        action.payload.newComment\n      );\n    },\n    // toggle the specified comment's like property\n    toggleCommentLike: (state, action) => {\n      let comment = state.posts[action.payload.postId].comments.find(\n        ({ id }) => id === action.payload.commentId\n      );\n      comment.liked = !comment.liked;\n    },\n    // fetch the user's local storage posts if available rather than use the client's starting mock data\n    fetchPosts: (state) => {\n      const { posts } = JSON.parse(localStorage.getItem(\"posts\")); // destructuring the item key \"posts\" from local storage\n      state.posts = posts; // set the redux store 'posts' state to be from local storage\n    },\n  },\n});\n\nexport const { addComment, toggleCommentLike, fetchPosts } = postSlice.actions;\n\nexport default postSlice.reducer;\n","import React from \"react\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\n\n/* The header for a post; creator's avatar, creator username, location of media, and options action button */\nconst PostHeader = ({ postCreator }) => {\n  const { username, location, profilePicture } = postCreator;\n\n  return (\n    <CardHeader\n      avatar={\n        <Avatar\n          alt={username}\n          src={require(`../../images/avatar/${profilePicture}.jpg`).default}\n        />\n      }\n      action={\n        <IconButton aria-label=\"settings\">\n          <MoreHorizIcon />\n        </IconButton>\n      }\n      title={username}\n      subheader={location}\n    />\n  );\n};\n\nexport default PostHeader;\n","import React from \"react\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\n/* The media content for a post; picture or video, but picture in this case */\nconst PostMedia = ({ postMedia }) => {\n  return (\n    <CardMedia\n      style={{ height: 300, width: 400 }}\n      component=\"img\"\n      image={require(`../../images/media/${postMedia}.jpg`).default}\n      title={postMedia}\n    />\n  );\n};\n\nexport default PostMedia;\n","import React from \"react\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport CommentOutlinedIcon from \"@material-ui/icons/CommentOutlined\";\nimport ShareOutlinedIcon from \"@material-ui/icons/ShareOutlined\";\nimport BookmarkBorderOutlinedIcon from \"@material-ui/icons/BookmarkBorderOutlined\";\n\n/* Actions available for a post itself; like, comment, share, bookmark post */\nconst PostActions = () => {\n  return (\n    <CardActions disableSpacing>\n      <IconButton aria-label=\"like post\">\n        <FavoriteBorderIcon fontSize=\"large\" />\n      </IconButton>\n      <IconButton aria-label=\"comment on post\">\n        <CommentOutlinedIcon fontSize=\"large\" />\n      </IconButton>\n      <IconButton aria-label=\"share post\">\n        <ShareOutlinedIcon fontSize=\"large\" />\n      </IconButton>\n      <IconButton aria-label=\"bookmark post\" style={{ marginLeft: \"auto\" }}>\n        <BookmarkBorderOutlinedIcon fontSize=\"large\" />\n      </IconButton>\n    </CardActions>\n  );\n};\n\nexport default PostActions;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { toggleCommentLike } from \"./postSlice\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\n\n/* A Comment component */\nconst Comment = ({ comment }) => {\n  const dispatch = useDispatch();\n  return (\n    <Box\n      marginLeft=\"auto\"\n      marginRight=\"auto\"\n      width=\"100%\"\n      display=\"flex\"\n      alignItems=\"center\"\n    >\n      <Box width={300} display=\"flex\" flexGrow={1}>\n        <Typography style={{ fontWeight: 600 }}>\n          {comment.postedBy} &nbsp;\n        </Typography>\n        <Typography style={{ minWidth: 0, overflowWrap: \"break-word\" }}>{comment.message}</Typography>\n      </Box>\n      <IconButton\n        aria-label={comment.liked ? \"unlike comment\" : \"like comment\"}\n        onClick={() =>\n          dispatch(toggleCommentLike({ commentId: comment.id, postId: 0 }))\n        }\n      >\n        {comment.liked ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n      </IconButton>\n    </Box>\n  );\n};\n\nexport default Comment;\n","import React from \"react\";\nimport Comment from \"./Comment\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Box from \"@material-ui/core/Box\";\n\n/* Container for all the comments of a post */\nconst CommentSection = ({ comments }) => {\n  return (\n    <CardContent>\n      {comments.map((comment) => (\n        <Comment key={comment.id} comment={comment} />\n      ))}\n      {/* <Box width=\"80%\" border={1} borderColor=\"grey.300\" borderRadius={10}>\n        {comments.map((comment) => (\n          <Comment key={comment.id} comment={comment} />\n        ))}\n      </Box> */}\n    </CardContent>\n  );\n};\n\nexport default CommentSection;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addComment } from \"./postSlice\";\nimport Box from \"@material-ui/core/Box\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Button from \"@material-ui/core/Button\";\n\n/* Form to add a new comment to an instagram post */\nconst AddCommentForm = () => {\n  // fetch the comments array of the current post; used for creation of new comment id\n  const comments = useSelector((state) => state.post.posts[0].comments);\n  const dispatch = useDispatch();\n  const [comment, setComment] = useState(\"\");\n\n  // controlled input\n  const handleCommentChange = (event) => {\n    setComment(event.target.value);\n  };\n\n  // dispatch the new comment to add and the current post id, reset input\n  const handleSubmitComment = (event) => {\n    event.preventDefault();\n    const newComment = {\n      id: comments.length,\n      postedBy: JSON.parse(localStorage.getItem(\"user\")).username,\n      message: comment,\n      liked: false,\n      replies: [],\n      repliedTo: null,\n    };\n    dispatch(addComment({ newComment, postId: 0 }));\n    setComment(\"\");\n  };\n\n  return (\n    <Box padding={1} marginLeft=\"auto\" marginRight=\"auto\" width=\"90%\">\n      <form style={{ display: \"flex\" }} onSubmit={handleSubmitComment}>\n        <InputBase\n          placeholder=\"Add a comment...\"\n          fullWidth={true}\n          value={comment}\n          onChange={handleCommentChange}\n        />\n        <Button\n          color=\"primary\"\n          style={{\n            fontWeight: 600,\n            textTransform: \"none\",\n            marginLeft: \"auto\",\n          }}\n          onClick={handleSubmitComment}\n        >\n          Post\n        </Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default AddCommentForm;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport PostHeader from \"./PostHeader\";\nimport PostMedia from \"./PostMedia\";\nimport PostActions from \"./PostActions\";\nimport CommentSection from \"./CommentSection\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport AddCommentForm from \"./AddCommentForm\";\n\n/* Portrait version of Instagram post (mobile view) */\nconst PostPortrait = ({ postId }) => {\n  // fetch the specified post from the postId props passed in\n  const post = useSelector((state) => state.post.posts[postId]);\n  const { creator, comments, media, likes, createdAt } = post;\n\n  return (\n    <Card>\n      <PostHeader postCreator={creator} />\n      <Divider />\n      <PostMedia postMedia={media} />\n      <PostActions />\n      <Typography style={{ fontWeight: 600, marginLeft: \"1rem\" }}>\n        {likes} likes\n      </Typography>\n      <CommentSection comments={comments} />\n      <Typography\n        style={{ color: \"grey\", marginLeft: \"1rem\", paddingBottom: \"1rem\" }}\n      >\n        {moment(createdAt).fromNow()}\n      </Typography>\n      <Divider />\n      <AddCommentForm />\n    </Card>\n  );\n};\n\nexport default PostPortrait;\n","import React from \"react\";\n// import { useSelector } from \"react-redux\";\n// import PostHeader from \"./PostHeader\";\n// import PostMedia from \"./PostMedia\";\n// import PostActions from \"./PostActions\";\n// import CommentSection from \"./CommentSection\";\n// import Divider from \"@material-ui/core/Divider\";\n// import AddCommentForm from \"./AddCommentForm\";\n\n/* Landscape version of Instagram post (web view) */\nconst PostLandscape = () => {\n  return (\n    <div>\n      {/* Landscape Version */}\n      {/* Left Side */}\n      {/* Card Image */}\n      {/* Right Side*/}\n      {/* Card Header */}\n      {/* Comments Section */}\n      {/* Card Action Bar Items; like, comment, share, bookmark  */}\n      {/* Post likes */}\n      {/* Post posted time elapsed */}\n      {/* Add Comment Form */}\n    </div>\n  );\n};\n\nexport default PostLandscape;\n","import React from \"react\";\nimport PostPortrait from \"./PostPortrait\";\nimport PostLandscape from \"./PostLandscape\";\n\n/* A Post component */\nconst Post = ({ postId, version }) => {\n  return (\n    <>\n      {version === 1 ? (\n        <PostPortrait postId={postId} />\n      ) : (\n        <PostLandscape postId={postId} />\n      )}\n    </>\n  );\n};\n\nexport default Post;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPosts } from \"./postSlice\";\nimport Post from \"./Post\";\n\n/* Container for all the posts to be populated */\nconst PostsContainer = () => {\n  const posts = useSelector((state) => state.post); // the 'posts' array from the redux store\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const localData = JSON.parse(localStorage.getItem(\"posts\")); // retrieve the posts data from user's local storage\n\n    // if the posts data does exist, then we set the posts value from local storage to the store to reflect most updated data\n    if (localData) {\n      dispatch(fetchPosts());\n    }\n  }, [dispatch]);\n\n  // set and update the posts data to local storage whenever the state changes\n  useEffect(() => {\n    localStorage.setItem(\"posts\", JSON.stringify(posts));\n  }, [posts]);\n\n  return (\n    <>\n      {/* Map all posts */}\n      <Post postId={0} version={1} />\n      {/* <Post postId={0} version={2} /> */}\n    </>\n  );\n};\n\nexport default PostsContainer;\n","import React, { useEffect } from \"react\";\nimport PostsContainer from \"./features/post/PostsContainer\";\nimport \"./App.css\";\n\nfunction App() {\n  useEffect(() => {\n    // retrieve the current user(name) from local storage\n    const currentUser = localStorage.getItem(\"user\");\n\n    // if the current user does not exist, then we populate the local storage with a user\n    if (!currentUser) {\n      localStorage.setItem(\n        \"user\",\n        JSON.stringify({\n          username: \"waterguy242\",\n          profilePicture: \"/static/images/avatar/5.jpg\",\n        })\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <PostsContainer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport postReducer from '../features/post/postSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    post: postReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}