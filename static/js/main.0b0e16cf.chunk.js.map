{"version":3,"sources":["images/avatar sync /^/.//.*/.jpg$","images/avatar/1.jpg","images/avatar/2.jpg","images/avatar/3.jpg","images/avatar/4.jpg","images/avatar/5.jpg","images/media sync /^/.//.*/.jpg$","images/media/flower.jpg","features/post/postSlice.js","features/post/PostHeader.js","features/post/PostMedia.js","features/post/PostActions.js","features/post/Comment.js","features/post/CommentList.js","features/post/AddCommentForm.js","features/post/PostPortrait.js","features/post/PostLandscape.js","features/post/Post.js","features/post/PostsContainer.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","postSlice","createSlice","name","initialState","posts","creator","username","location","profilePicture","media","likes","createdAt","isLandscape","comments","postedBy","message","liked","replies","repliedTo","reducers","addComment","state","action","payload","postId","push","newComment","toggleCommentLike","comment","find","commentId","fetchPosts","JSON","parse","localStorage","getItem","actions","PostHeader","postCreator","CardHeader","avatar","Avatar","alt","src","require","default","IconButton","aria-label","title","subheader","PostMedia","postMedia","height","width","CardMedia","style","component","image","PostActions","CardActions","disableSpacing","fontSize","marginLeft","Comment","dispatch","useDispatch","ListItem","ListItemAvatar","ListItemText","primary","Box","display","Typography","fontWeight","minWidth","overflowWrap","secondary","flexDirection","gap","color","Button","disableRipple","textTransform","backgroundColor","padding","length","margin","ListItemSecondaryAction","onClick","CommentList","CardContent","overflow","maxHeight","List","slice","AddCommentForm","useSelector","post","useState","setComment","handleSubmitComment","event","preventDefault","marginRight","onSubmit","InputBase","placeholder","fullWidth","value","onChange","target","PostPortrait","Card","Divider","paddingBottom","moment","fromNow","PostLandscape","cardHeight","setCardHeight","cardRef","useRef","useEffect","current","clientHeight","ref","marginTop","marginBottom","flex","Post","version","PostsContainer","setItem","stringify","App","className","fetchCount","amount","Promise","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","store","configureStore","reducer","counter","counterReducer","postReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAA,IAAIA,EAAM,CACT,UAAW,GACX,UAAW,GACX,UAAW,GACX,UAAW,GACX,UAAW,IAIZ,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,qDC1BpB,OAAe,cAA0B,+B,gCCAzC,OAAe,cAA0B,+B,gCCAzC,OAAe,cAA0B,+B,gCCAzC,OAAe,cAA0B,+B,gCCAzC,OAAe,cAA0B,+B,mBCAzC,IAAIH,EAAM,CACT,eAAgB,IAIjB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,gCCtBpB,OAAe,cAA0B,oC,yHCgD5BY,EAAYC,YAAY,CACnCC,KAAM,OACNC,aAhDmB,CACnBC,MAAO,CACL,CACEhB,GAAI,EACJiB,QAAS,CACPC,SAAU,cACVC,SAAU,0BACVC,eAAgB,KAElBC,MAAO,SACPC,MAAO,GACPC,UAAW,2BACXC,aAAa,EACbC,SAAU,CACR,CACEzB,GAAI,EACJ0B,SAAU,OACVN,eAAgB,IAChBO,QAAS,4BACTC,OAAO,EACPC,QAAS,GACTC,UAAW,MAEb,CACE9B,GAAI,EACJ0B,SAAU,QACVN,eAAgB,IAChBO,QAAS,UACTC,OAAO,EACPC,QAAS,GACTC,UAAW,MAEb,CACE9B,GAAI,EACJ0B,SAAU,UACVN,eAAgB,IAChBO,QAAS,YACTC,OAAO,EACPC,QAAS,GACTC,UAAW,UAUnBC,SAAU,CAERC,WAAY,SAACC,EAAOC,GAClBD,EAAMjB,MAAMkB,EAAOC,QAAQC,QAAQX,SAASY,KAC1CH,EAAOC,QAAQG,aAInBC,kBAAmB,SAACN,EAAOC,GACzB,IAAIM,EAAUP,EAAMjB,MAAMkB,EAAOC,QAAQC,QAAQX,SAASgB,MACxD,qBAAGzC,KAAgBkC,EAAOC,QAAQO,aAEpCF,EAAQZ,OAASY,EAAQZ,OAG3Be,WAAY,SAACV,GACX,IAAQjB,EAAU4B,KAAKC,MAAMC,aAAaC,QAAQ,UAA1C/B,MACRiB,EAAMjB,MAAQA,MAKb,EAAsDJ,EAAUoC,QAAxDhB,EAAR,EAAQA,WAAYO,EAApB,EAAoBA,kBAAmBI,EAAvC,EAAuCA,WAE/B/B,IAAf,Q,oEC9CeqC,EAtBI,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACZhC,EAAuCgC,EAAvChC,SAAUC,EAA6B+B,EAA7B/B,SAAUC,EAAmB8B,EAAnB9B,eAE5B,OACE,cAAC+B,EAAA,EAAD,CACEC,OACE,cAACC,EAAA,EAAD,CACEC,IAAKpC,EACLqC,IAAKC,MAAQ,YAAuBpC,EAAxB,SAA8CqC,UAG9DvB,OACE,cAACwB,EAAA,EAAD,CAAYC,aAAW,WAAvB,SACE,cAAC,IAAD,MAGJC,MAAO1C,EACP2C,UAAW1C,K,SCTF2C,EAXG,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACtC,OACE,cAACC,EAAA,EAAD,CACEC,MAAO,CAAEH,SAAQC,SACjBG,UAAU,MACVC,MAAOb,MAAQ,YAAsBO,EAAvB,SAAwCN,QACtDG,MAAOG,K,6ECkBEO,EAnBK,WAClB,OACE,eAACC,EAAA,EAAD,CAAaC,gBAAc,EAA3B,UACE,cAACd,EAAA,EAAD,CAAYC,aAAW,YAAvB,SACE,cAAC,IAAD,CAAoBc,SAAS,YAE/B,cAACf,EAAA,EAAD,CAAYC,aAAW,kBAAvB,SACE,cAAC,IAAD,CAAqBc,SAAS,YAEhC,cAACf,EAAA,EAAD,CAAYC,aAAW,aAAvB,SACE,cAAC,IAAD,CAAmBc,SAAS,YAE9B,cAACf,EAAA,EAAD,CAAYC,aAAW,gBAAgBQ,MAAO,CAAEO,WAAY,QAA5D,SACE,cAAC,IAAD,CAA4BD,SAAS,gB,+EC0E9BE,EA/EC,SAAC,GAA8B,IAA5BnC,EAA2B,EAA3BA,QAAShB,EAAkB,EAAlBA,YAClBE,EAA0Dc,EAA1Dd,SAAUC,EAAgDa,EAAhDb,QAASC,EAAuCY,EAAvCZ,MAAO5B,EAAgCwC,EAAhCxC,GAAIoB,EAA4BoB,EAA5BpB,eAAgBS,EAAYW,EAAZX,QAChD+C,EAAWC,cACjB,OACE,eAACC,EAAA,EAAD,WACGtD,GACC,cAACuD,EAAA,EAAD,UACE,cAAC1B,EAAA,EAAD,CACEC,IAAK5B,EACL6B,IAAKC,MAAQ,YAAuBpC,EAAxB,SAA8CqC,YAIhE,cAACuB,EAAA,EAAD,CACEZ,UAAW,MACXa,QACE,eAACC,EAAA,EAAD,CAAKjB,MAAO,IAAKkB,QAAQ,OAAzB,UACE,eAACC,EAAA,EAAD,CAAYjB,MAAO,CAAEkB,WAAY,KAAjC,UACG3D,EADH,WAGA,cAAC0D,EAAA,EAAD,CAAYjB,MAAO,CAAEmB,SAAU,EAAGC,aAAc,cAAhD,SACG5D,OAIP6D,UACEhE,GACE,eAAC0D,EAAA,EAAD,CAAKjB,MAAO,IAAKkB,QAAQ,OAAOM,cAAc,SAA9C,UACE,eAACP,EAAA,EAAD,CAAKjB,MAAO,IAAKkB,QAAQ,OAAOhB,MAAO,CAAEuB,IAAK,IAA9C,UACE,cAACN,EAAA,EAAD,kBACCxD,GACC,cAACwD,EAAA,EAAD,CAAYjB,MAAO,CAAEwB,MAAO,QAA5B,oBAEF,cAACC,EAAA,EAAD,CACEC,eAAa,EACb1B,MAAO,CACLwB,MAAO,OACPG,cAAe,OACfC,gBAAiB,cACjBC,QAAS,YACTV,SAAU,GAPd,sBAaDzD,EAAQoE,OAAS,GAChB,eAACf,EAAA,EAAD,CAAKjB,MAAO,IAAKkB,QAAQ,OAAzB,UACE,qBACEhB,MAAO,CACLwB,MAAO,OACPO,OAAQ,qBAHZ,oBAQA,eAACd,EAAA,EAAD,CAAYjB,MAAO,CAAEwB,MAAO,QAA5B,2BACiB9D,EAAQoE,OADzB,eASZ,cAACE,EAAA,EAAD,UACE,cAACzC,EAAA,EAAD,CACEC,aAAY/B,EAAQ,iBAAmB,eACvCwE,QAAS,kBACPxB,EAASrC,EAAkB,CAAEG,UAAW1C,EAAIoC,OAAQ,MAHxD,SAMGR,EAAQ,cAAC,IAAD,IAAmB,cAAC,IAAD,Y,kBC7BvByE,EAlDK,SAAC,GAA+B,IAA7B5E,EAA4B,EAA5BA,SAAUD,EAAkB,EAAlBA,YAC/B,OACE,cAAC8E,EAAA,EAAD,CAAanC,MAAO,CAAE6B,QAAS,EAAGO,SAAU,OAAQC,UAAW,KAA/D,SACE,eAACC,EAAA,EAAD,YACIjF,GACA,qCACGC,EAASiF,MAAM,EAAG,GAAG7G,KAAI,SAAC2C,GAAD,OACxB,cAAC,EAAD,CAEEA,QAASA,EACThB,YAAaA,GAFRgB,EAAQxC,OAIb,IACHyB,EAASwE,OAAS,GACjB,eAACL,EAAA,EAAD,CACEC,eAAa,EACb1B,MAAO,CACLwB,MAAO,OACPG,cAAe,OACfC,gBAAiB,cACjBC,QAAS,YACTV,SAAU,EACVZ,WAAY,QARhB,sBAWYjD,EAASwE,OAXrB,eAcDxE,EAASiF,OAAO,GAAG7G,KAAI,SAAC2C,GAAD,OACtB,cAAC,EAAD,CAEEA,QAASA,EACThB,YAAaA,GAFRgB,EAAQxC,UAOpBwB,GACCC,EAAS5B,KAAI,SAAC2C,GAAD,OACX,cAAC,EAAD,CAEEA,QAASA,EACThB,YAAaA,GAFRgB,EAAQxC,a,mCCUZ2G,EApDQ,WAErB,IAAMlF,EAAWmF,aAAY,SAAC3E,GAAD,OAAWA,EAAM4E,KAAK7F,MAAM,GAAGS,YACtDmD,EAAWC,cACjB,EAA8BiC,mBAAS,IAAvC,mBAAOtE,EAAP,KAAgBuE,EAAhB,KAQMC,EAAsB,SAACC,GAC3BA,EAAMC,iBACN,IAAM5E,EAAa,CACjBtC,GAAIyB,EAASwE,OACbvE,SAAUkB,KAAKC,MAAMC,aAAaC,QAAQ,SAAS7B,SACnDE,eAAgB,IAChBO,QAASa,EACTZ,OAAO,EACPC,QAAS,GACTC,UAAW,MAEb8C,EAAS5C,EAAW,CAAEM,aAAYF,OAAQ,KAC1C2E,EAAW,KAGb,OACE,cAAC7B,EAAA,EAAD,CAAKc,QAAS,EAAGtB,WAAW,OAAOyC,YAAY,OAAOlD,MAAM,MAA5D,SACE,uBAAME,MAAO,CAAEgB,QAAS,QAAUiC,SAAUJ,EAA5C,UACE,cAACK,EAAA,EAAD,CACEC,YAAY,mBACZC,WAAW,EACXC,MAAOhF,EACPiF,SA3BoB,SAACR,GAC3BF,EAAWE,EAAMS,OAAOF,UA4BpB,cAAC5B,EAAA,EAAD,CACED,MAAM,UACNxB,MAAO,CACLkB,WAAY,IACZS,cAAe,OACfpB,WAAY,QAEd0B,QAASY,EAPX,wBCLOW,GA1BM,SAAC,GAAgB,IAAdvF,EAAa,EAAbA,OAEhByE,EAAOD,aAAY,SAAC3E,GAAD,OAAWA,EAAM4E,KAAK7F,MAAMoB,MAC7CnB,EAA+C4F,EAA/C5F,QAASQ,EAAsCoF,EAAtCpF,SAAUJ,EAA4BwF,EAA5BxF,MAAOC,EAAqBuF,EAArBvF,MAAOC,EAAcsF,EAAdtF,UAEzC,OACE,eAACqG,EAAA,EAAD,WACE,cAAC,EAAD,CAAY1E,YAAajC,IACzB,cAAC4G,EAAA,EAAD,IACA,cAAC,EAAD,CAAW9D,UAAW1C,EAAO2C,OAAQ,IAAKC,MAAO,MACjD,cAAC,EAAD,IACA,eAACmB,EAAA,EAAD,CAAYjB,MAAO,CAAEkB,WAAY,IAAKX,WAAY,QAAlD,UACGpD,EADH,YAGA,cAAC,EAAD,CAAaG,SAAUA,IACvB,cAAC2D,EAAA,EAAD,CACEjB,MAAO,CAAEwB,MAAO,OAAQjB,WAAY,OAAQoD,cAAe,QAD7D,SAGGC,IAAOxG,GAAWyG,YAErB,cAACH,EAAA,EAAD,IACA,cAAC,EAAD,QCyBSI,GA9CO,SAAC,GAAgB,IAAd7F,EAAa,EAAbA,OAEjByE,EAAOD,aAAY,SAAC3E,GAAD,OAAWA,EAAM4E,KAAK7F,MAAMoB,MACrD,EAAoC0E,mBAAS,GAA7C,mBAAOoB,EAAP,KAAmBC,EAAnB,KACMC,EAAUC,iBAAO,MAGvBC,qBAAU,WACRH,EAAcC,EAAQG,QAAQC,iBAGhC,IAAQvH,EAA+C4F,EAA/C5F,QAASQ,EAAsCoF,EAAtCpF,SAAUJ,EAA4BwF,EAA5BxF,MAAOC,EAAqBuF,EAArBvF,MAAOC,EAAcsF,EAAdtF,UAEzC,OAEE,cADA,CACCqG,EAAA,EAAD,CACEa,IAAKL,EACLjE,MAAO,CAAEgB,QAAS,OAAQuD,UAAW,OAAQC,aAAc,QAF7D,UAIE,cAAC,EAAD,CACE5E,UAAW1C,EACX2C,OAAQkE,GAAc,IACtBjE,MAAO,IACPE,MAAO,CAAEyE,KAAM,cAEjB,sBAAKzE,MAAO,CAAEgB,QAAS,OAAQM,cAAe,UAA9C,UACE,cAAC,EAAD,CAAYvC,YAAajC,IACzB,cAAC4G,EAAA,EAAD,IACA,cAAC,EAAD,CAAapG,SAAUA,EAAUD,aAAa,IAC9C,cAACqG,EAAA,EAAD,IACA,cAAC,EAAD,IACA,eAACzC,EAAA,EAAD,CAAYjB,MAAO,CAAEkB,WAAY,IAAKX,WAAY,QAAlD,UACGpD,EADH,YAGA,cAAC8D,EAAA,EAAD,CACEjB,MAAO,CAAEwB,MAAO,OAAQjB,WAAY,OAAQoD,cAAe,QAD7D,SAGGC,IAAOxG,GAAWyG,YAErB,cAACH,EAAA,EAAD,IACA,cAAC,EAAD,WCpCOgB,GAZF,SAAC,GAAyB,IAAvBzG,EAAsB,EAAtBA,OAAQ0G,EAAc,EAAdA,QACtB,OACE,mCACe,IAAZA,EACC,cAAC,GAAD,CAAc1G,OAAQA,IAEtB,cAAC,GAAD,CAAeA,OAAQA,OCsBhB2G,GA3BQ,WACrB,IAAM/H,EAAQ4F,aAAY,SAAC3E,GAAD,OAAWA,EAAM4E,QACrCjC,EAAWC,cAgBjB,OAdAyD,qBAAU,WACU1F,KAAKC,MAAMC,aAAaC,QAAQ,WAIhD6B,EAASjC,OAEV,CAACiC,IAGJ0D,qBAAU,WACRxF,aAAakG,QAAQ,QAASpG,KAAKqG,UAAUjI,MAC5C,CAACA,IAGF,qCAEE,cAAC,GAAD,CAAMoB,OAAQ,EAAG0G,QAAS,IAC1B,cAAC,GAAD,CAAM1G,OAAQ,EAAG0G,QAAS,Q,MCEjBI,OA1Bf,WAiBE,OAhBAZ,qBAAU,WAEYxF,aAAaC,QAAQ,SAIvCD,aAAakG,QACX,OACApG,KAAKqG,UAAU,CACb/H,SAAU,cACVE,eAAgB,mCAIrB,IAGD,qBAAK+H,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,GAAD,S,6BCvBD,SAASC,KAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAAQ,SAAC7I,GAAD,OACjB8I,YAAW,kBAAM9I,EAAQ,CAAE+I,KAAMH,MAAW,QCAhD,IAUaI,GAAiBC,YAC5B,qBAD4C,yCAE5C,WAAOL,GAAP,gBAAAM,EAAA,sEACyBP,GAAWC,GADpC,cACQO,EADR,yBAGSA,EAASJ,MAHlB,2CAF4C,uDASjCK,GAAehJ,YAAY,CACtCC,KAAM,UACNC,aArBmB,CACnByG,MAAO,EACPsC,OAAQ,QAqBR/H,SAAU,CACRgI,UAAW,SAAC9H,GAKVA,EAAMuF,OAAS,GAEjBwC,UAAW,SAAC/H,GACVA,EAAMuF,OAAS,GAGjByC,kBAAmB,SAAChI,EAAOC,GACzBD,EAAMuF,OAAStF,EAAOC,UAK1B+H,cAAe,SAACC,GACdA,EACGC,QAAQX,GAAeY,SAAS,SAACpI,GAChCA,EAAM6H,OAAS,aAEhBM,QAAQX,GAAea,WAAW,SAACrI,EAAOC,GACzCD,EAAM6H,OAAS,OACf7H,EAAMuF,OAAStF,EAAOC,cAKvB,GAAoD0H,GAAa7G,QAgBzD6G,IAhBR,GAAQE,UAAR,GAAmBC,UAAnB,GAA8BC,kBAgBtBJ,GAAf,SCpEaU,GAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,GACT9D,KAAM+D,KCKUC,QACW,cAA7BC,OAAO3J,SAAS4J,UAEe,UAA7BD,OAAO3J,SAAS4J,UAEhBD,OAAO3J,SAAS4J,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJa,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.0b0e16cf.chunk.js","sourcesContent":["var map = {\n\t\"./1.jpg\": 82,\n\t\"./2.jpg\": 83,\n\t\"./3.jpg\": 84,\n\t\"./4.jpg\": 85,\n\t\"./5.jpg\": 86\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 49;","export default __webpack_public_path__ + \"static/media/1.c73334b1.jpg\";","export default __webpack_public_path__ + \"static/media/2.b72eb251.jpg\";","export default __webpack_public_path__ + \"static/media/3.a692fe88.jpg\";","export default __webpack_public_path__ + \"static/media/4.b40ae7fe.jpg\";","export default __webpack_public_path__ + \"static/media/5.825d1c43.jpg\";","var map = {\n\t\"./flower.jpg\": 89\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 88;","export default __webpack_public_path__ + \"static/media/flower.139557a3.jpg\";","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  posts: [\n    {\n      id: 0,\n      creator: {\n        username: \"kingkong123\",\n        location: \"Los Angeles, California\",\n        profilePicture: \"1\",\n      },\n      media: \"flower\",\n      likes: 23,\n      createdAt: \"2021-04-23T14:48:00.000Z\",\n      isLandscape: false,\n      comments: [\n        {\n          id: 0,\n          postedBy: \"John\",\n          profilePicture: \"2\",\n          message: \"Hey everyone! First post!\",\n          liked: false,\n          replies: [],\n          repliedTo: null,\n        },\n        {\n          id: 1,\n          postedBy: \"Sarah\",\n          profilePicture: \"3\",\n          message: \"Cool!!!\",\n          liked: false,\n          replies: [],\n          repliedTo: null,\n        },\n        {\n          id: 2,\n          postedBy: \"Krystal\",\n          profilePicture: \"4\",\n          message: \"Nice one.\",\n          liked: false,\n          replies: [],\n          repliedTo: null,\n        },\n      ],\n    },\n  ],\n};\n\nexport const postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {\n    // add a new comment to the specified post's comments array\n    addComment: (state, action) => {\n      state.posts[action.payload.postId].comments.push(\n        action.payload.newComment\n      );\n    },\n    // toggle the specified comment's like property\n    toggleCommentLike: (state, action) => {\n      let comment = state.posts[action.payload.postId].comments.find(\n        ({ id }) => id === action.payload.commentId\n      );\n      comment.liked = !comment.liked;\n    },\n    // fetch the user's local storage posts if available rather than use the client's starting mock data\n    fetchPosts: (state) => {\n      const { posts } = JSON.parse(localStorage.getItem(\"posts\")); // destructuring the item key \"posts\" from local storage\n      state.posts = posts; // set the redux store 'posts' state to be from local storage\n    },\n  },\n});\n\nexport const { addComment, toggleCommentLike, fetchPosts } = postSlice.actions;\n\nexport default postSlice.reducer;\n","import React from \"react\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\n\n/* The header for a post; creator's avatar, creator username, location of media, and options action button */\nconst PostHeader = ({ postCreator }) => {\n  const { username, location, profilePicture } = postCreator;\n\n  return (\n    <CardHeader\n      avatar={\n        <Avatar\n          alt={username}\n          src={require(`../../images/avatar/${profilePicture}.jpg`).default}\n        />\n      }\n      action={\n        <IconButton aria-label=\"settings\">\n          <MoreHorizIcon />\n        </IconButton>\n      }\n      title={username}\n      subheader={location}\n    />\n  );\n};\n\nexport default PostHeader;\n","import React from \"react\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\n/* The media content for a post; picture or video, but picture in this case */\nconst PostMedia = ({ postMedia, height, width }) => {\n  return (\n    <CardMedia\n      style={{ height, width }}\n      component=\"img\"\n      image={require(`../../images/media/${postMedia}.jpg`).default}\n      title={postMedia}\n    />\n  );\n};\n\nexport default PostMedia;\n","import React from \"react\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport CommentOutlinedIcon from \"@material-ui/icons/CommentOutlined\";\nimport ShareOutlinedIcon from \"@material-ui/icons/ShareOutlined\";\nimport BookmarkBorderOutlinedIcon from \"@material-ui/icons/BookmarkBorderOutlined\";\n\n/* Actions available for a post itself; like, comment, share, bookmark post */\nconst PostActions = () => {\n  return (\n    <CardActions disableSpacing>\n      <IconButton aria-label=\"like post\">\n        <FavoriteBorderIcon fontSize=\"large\" />\n      </IconButton>\n      <IconButton aria-label=\"comment on post\">\n        <CommentOutlinedIcon fontSize=\"large\" />\n      </IconButton>\n      <IconButton aria-label=\"share post\">\n        <ShareOutlinedIcon fontSize=\"large\" />\n      </IconButton>\n      <IconButton aria-label=\"bookmark post\" style={{ marginLeft: \"auto\" }}>\n        <BookmarkBorderOutlinedIcon fontSize=\"large\" />\n      </IconButton>\n    </CardActions>\n  );\n};\n\nexport default PostActions;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { toggleCommentLike } from \"./postSlice\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\n\n/* A Comment component */\n/* Only show the avatar and subheaders (time elapseds since commented, likes, and reply button) on landscape view */\nconst Comment = ({ comment, isLandscape }) => {\n  const { postedBy, message, liked, id, profilePicture, replies } = comment;\n  const dispatch = useDispatch();\n  return (\n    <ListItem>\n      {isLandscape && (\n        <ListItemAvatar>\n          <Avatar\n            alt={postedBy}\n            src={require(`../../images/avatar/${profilePicture}.jpg`).default}\n          />\n        </ListItemAvatar>\n      )}\n      <ListItemText\n        component={'div'}\n        primary={\n          <Box width={300} display=\"flex\">\n            <Typography style={{ fontWeight: 600 }}>\n              {postedBy} &nbsp;\n            </Typography>\n            <Typography style={{ minWidth: 0, overflowWrap: \"break-word\" }}>\n              {message}\n            </Typography>\n          </Box>\n        }\n        secondary={\n          isLandscape && (\n            <Box width={300} display=\"flex\" flexDirection=\"column\">\n              <Box width={300} display=\"flex\" style={{ gap: 12 }}>\n                <Typography>11h</Typography>\n                {liked && (\n                  <Typography style={{ color: \"grey\" }}>1 like</Typography>\n                )}\n                <Button\n                  disableRipple\n                  style={{\n                    color: \"grey\",\n                    textTransform: \"none\",\n                    backgroundColor: \"transparent\",\n                    padding: \"1px 0 0 0\",\n                    minWidth: 0,\n                  }}\n                >\n                  Reply\n                </Button>\n              </Box>\n              {replies.length > 0 && (\n                <Box width={300} display=\"flex\">\n                  <div\n                    style={{\n                      color: \"grey\",\n                      margin: \"2px 10px 0px 10px\",\n                    }}\n                  >\n                    ―\n                  </div>\n                  <Typography style={{ color: \"grey\" }}>\n                    View replies ({replies.length})\n                  </Typography>\n                </Box>\n              )}\n            </Box>\n          )\n        }\n      />\n      <ListItemSecondaryAction>\n        <IconButton\n          aria-label={liked ? \"unlike comment\" : \"like comment\"}\n          onClick={() =>\n            dispatch(toggleCommentLike({ commentId: id, postId: 0 }))\n          }\n        >\n          {liked ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nexport default Comment;\n","import React from \"react\";\nimport Comment from \"./Comment\";\nimport List from \"@material-ui/core/List\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\n\n/* Container for all the comments of a post */\n/* If the post is portrait, we only want to display the first and last 2 comments. */\n/* If there are more than 3 comments, a \"View all comments\" button\" */\n/* If the post is landscape, we display all comments as usual but with a scrollable window for more than 4 comments */\nconst CommentList = ({ comments, isLandscape }) => {\n  return (\n    <CardContent style={{ padding: 0, overflow: \"auto\", maxHeight: 324 }}>\n      <List>\n        {!isLandscape && (\n          <>\n            {comments.slice(0, 1).map((comment) => (\n              <Comment\n                key={comment.id}\n                comment={comment}\n                isLandscape={isLandscape}\n              />\n            ))}{\" \"}\n            {comments.length > 3 && (\n              <Button\n                disableRipple\n                style={{\n                  color: \"grey\",\n                  textTransform: \"none\",\n                  backgroundColor: \"transparent\",\n                  padding: \"1px 0 0 0\",\n                  minWidth: 0,\n                  marginLeft: \"1rem\",\n                }}\n              >\n                View all {comments.length} comments\n              </Button>\n            )}\n            {comments.slice(-2).map((comment) => (\n              <Comment\n                key={comment.id}\n                comment={comment}\n                isLandscape={isLandscape}\n              />\n            ))}\n          </>\n        )}\n        {isLandscape &&\n          comments.map((comment) => (\n            <Comment\n              key={comment.id}\n              comment={comment}\n              isLandscape={isLandscape}\n            />\n          ))}\n      </List>\n    </CardContent>\n  );\n};\n\nexport default CommentList;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addComment } from \"./postSlice\";\nimport Box from \"@material-ui/core/Box\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Button from \"@material-ui/core/Button\";\n\n/* Form to add a new comment to an instagram post */\nconst AddCommentForm = () => {\n  // fetch the comments array of the current post; used for creation of new comment id\n  const comments = useSelector((state) => state.post.posts[0].comments);\n  const dispatch = useDispatch();\n  const [comment, setComment] = useState(\"\");\n\n  // controlled input\n  const handleCommentChange = (event) => {\n    setComment(event.target.value);\n  };\n\n  // dispatch the new comment to add and the current post id, reset input\n  const handleSubmitComment = (event) => {\n    event.preventDefault();\n    const newComment = {\n      id: comments.length,\n      postedBy: JSON.parse(localStorage.getItem(\"user\")).username,\n      profilePicture: \"5\",\n      message: comment,\n      liked: false,\n      replies: [],\n      repliedTo: null,\n    };\n    dispatch(addComment({ newComment, postId: 0 }));\n    setComment(\"\");\n  };\n\n  return (\n    <Box padding={1} marginLeft=\"auto\" marginRight=\"auto\" width=\"90%\">\n      <form style={{ display: \"flex\" }} onSubmit={handleSubmitComment}>\n        <InputBase\n          placeholder=\"Add a comment...\"\n          fullWidth={true}\n          value={comment}\n          onChange={handleCommentChange}\n        />\n        <Button\n          color=\"primary\"\n          style={{\n            fontWeight: 600,\n            textTransform: \"none\",\n            marginLeft: \"auto\",\n          }}\n          onClick={handleSubmitComment}\n        >\n          Post\n        </Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default AddCommentForm;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport PostHeader from \"./PostHeader\";\nimport PostMedia from \"./PostMedia\";\nimport PostActions from \"./PostActions\";\nimport CommentList from \"./CommentList\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport AddCommentForm from \"./AddCommentForm\";\n\n/* Portrait version of Instagram post (mobile view) */\nconst PostPortrait = ({ postId }) => {\n  // fetch the specified post from the postId props passed in\n  const post = useSelector((state) => state.post.posts[postId]);\n  const { creator, comments, media, likes, createdAt } = post;\n\n  return (\n    <Card>\n      <PostHeader postCreator={creator} />\n      <Divider />\n      <PostMedia postMedia={media} height={300} width={400} />\n      <PostActions />\n      <Typography style={{ fontWeight: 600, marginLeft: \"1rem\" }}>\n        {likes} likes\n      </Typography>\n      <CommentList comments={comments} />\n      <Typography\n        style={{ color: \"grey\", marginLeft: \"1rem\", paddingBottom: \"1rem\" }}\n      >\n        {moment(createdAt).fromNow()}\n      </Typography>\n      <Divider />\n      <AddCommentForm />\n    </Card>\n  );\n};\n\nexport default PostPortrait;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport PostHeader from \"./PostHeader\";\nimport PostMedia from \"./PostMedia\";\nimport PostActions from \"./PostActions\";\nimport CommentList from \"./CommentList\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport AddCommentForm from \"./AddCommentForm\";\n\n/* Landscape version of Instagram post (web view) */\nconst PostLandscape = ({ postId }) => {\n  // fetch the specified post from the postId props passed in\n  const post = useSelector((state) => state.post.posts[postId]);\n  const [cardHeight, setCardHeight] = useState(0); // keep track of card height to dynamicly change image height\n  const cardRef = useRef(null); // reference the card height each time the component re-renders\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    setCardHeight(cardRef.current.clientHeight);\n  });\n\n  const { creator, comments, media, likes, createdAt } = post;\n\n  return (\n    /* added margin for this landscape card because of Post components direct placement */\n    <Card\n      ref={cardRef}\n      style={{ display: \"flex\", marginTop: \"1rem\", marginBottom: \"1rem\" }}\n    >\n      <PostMedia\n        postMedia={media}\n        height={cardHeight || 445}\n        width={600}\n        style={{ flex: \"1 0 auto\" }}\n      />\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <PostHeader postCreator={creator} />\n        <Divider />\n        <CommentList comments={comments} isLandscape={true} />\n        <Divider />\n        <PostActions />\n        <Typography style={{ fontWeight: 600, marginLeft: \"1rem\" }}>\n          {likes} likes\n        </Typography>\n        <Typography\n          style={{ color: \"grey\", marginLeft: \"1rem\", paddingBottom: \"1rem\" }}\n        >\n          {moment(createdAt).fromNow()}\n        </Typography>\n        <Divider />\n        <AddCommentForm />\n      </div>\n    </Card>\n  );\n};\n\nexport default PostLandscape;\n","import React from \"react\";\nimport PostPortrait from \"./PostPortrait\";\nimport PostLandscape from \"./PostLandscape\";\n\n/* A Post component */\nconst Post = ({ postId, version }) => {\n  return (\n    <>\n      {version === 1 ? (\n        <PostPortrait postId={postId} />\n      ) : (\n        <PostLandscape postId={postId} />\n      )}\n    </>\n  );\n};\n\nexport default Post;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPosts } from \"./postSlice\";\nimport Post from \"./Post\";\n\n/* Container for all the posts to be populated */\nconst PostsContainer = () => {\n  const posts = useSelector((state) => state.post); // the 'posts' array from the redux store\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const localData = JSON.parse(localStorage.getItem(\"posts\")); // retrieve the posts data from user's local storage\n\n    // if the posts data does exist, then we set the posts value from local storage to the store to reflect most updated data\n    if (localData) {\n      dispatch(fetchPosts());\n    }\n  }, [dispatch]);\n\n  // set and update the posts data to local storage whenever the state changes\n  useEffect(() => {\n    localStorage.setItem(\"posts\", JSON.stringify(posts));\n  }, [posts]);\n\n  return (\n    <>\n      {/* Map all posts */}\n      <Post postId={0} version={1} />\n      <Post postId={0} version={2} />\n    </>\n  );\n};\n\nexport default PostsContainer;\n","import React, { useEffect } from \"react\";\nimport PostsContainer from \"./features/post/PostsContainer\";\nimport \"./App.css\";\n\nfunction App() {\n  useEffect(() => {\n    // retrieve the current user(name) from local storage\n    const currentUser = localStorage.getItem(\"user\");\n\n    // if the current user does not exist, then we populate the local storage with a user\n    if (!currentUser) {\n      localStorage.setItem(\n        \"user\",\n        JSON.stringify({\n          username: \"waterguy242\",\n          profilePicture: \"/static/images/avatar/5.jpg\",\n        })\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <PostsContainer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport postReducer from '../features/post/postSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    post: postReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}